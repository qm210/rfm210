
    precision highp float;

    const vec3 c = vec3(1.,0.,-1.);


     // nr4 advice: hardcode replace these
    #define PIXEL .005

    void dbox(in vec2 x, in vec2 b, in float distort, inout float d)
    {
        vec2 da = abs(x*distort)-b;
        d = min(d, length(max(da,c.yy)) + min(max(da.x,da.y),0.0));
    }

    void rot(in float phi, out mat2 m)
    {
        vec2 cs = vec2(cos(phi), sin(phi));
        m = mat2(cs.x, -cs.y, cs.y, cs.x);
    }
    float sm(in float d, in float blur)
    {
        return smoothstep(.2/iResolution.y, -.2/iResolution.y, blur*d);
    }
    void rect(in vec2 uv, in vec4 rect, in vec2 shift, in float phi, in float scale, in float distort, inout float d)
    {
        mat2 R;
        rot(phi, R);
        R /= max(1.e-3, scale);
        //dbox(R*uv + PIXEL*(vec2(-rect.z,rect.w) + R*vec2(-2.*shift.x,2.*shift.y) + vec2(-2.*rect.x, 2.*rect.y)), vec2(rect.z,rect.w)*PIXEL, d);
        dbox(R*uv + PIXEL*(vec2(-rect.z,rect.w) + vec2(-2.*shift.x,2.*shift.y) + vec2(-2.*rect.x, 2.*rect.y)), vec2(rect.z,rect.w)*PIXEL, distort, d);
    }
    void glyph_undefined(in vec2 UV, in vec2 shift, in float phi, in float scale, in float alpha, in float distort, inout float d)
        {rect(UV,vec4(0,0,9,16),shift,phi,scale,distort,d);}
        void glyph_N(in vec2 UV, in vec2 shift, in float phi, in float scale, in float alpha, in float distort, inout float d)
                {
                    rect(UV,vec4(3,3,1,9),shift,phi,scale,distort,d);rect(UV,vec4(3,3,3,3),shift,phi,scale,distort,d);rect(UV,vec4(5,3,1,5),shift,phi,scale,distort,d);rect(UV,vec4(10,3,1,8),shift,phi,scale,distort,d);rect(UV,vec4(10,4,2,3),shift,phi,scale,distort,d);rect(UV,vec4(5,6,2,2),shift,phi,scale,distort,d);rect(UV,vec4(6,6,1,4),shift,phi,scale,distort,d);rect(UV,vec4(2,8,1,6),shift,phi,scale,distort,d);rect(UV,vec4(6,8,2,2),shift,phi,scale,distort,d);rect(UV,vec4(7,8,1,4),shift,phi,scale,distort,d);rect(UV,vec4(9,8,1,5),shift,phi,scale,distort,d);rect(UV,vec4(1,10,1,5),shift,phi,scale,distort,d);rect(UV,vec4(7,10,3,2),shift,phi,scale,distort,d);rect(UV,vec4(8,10,1,4),shift,phi,scale,distort,d);rect(UV,vec4(0,13,1,4),shift,phi,scale,distort,d);rect(UV,vec4(0,16,2,1),shift,phi,scale,distort,d);
                }
void glyph_o(in vec2 UV, in vec2 shift, in float phi, in float scale, in float alpha, in float distort, inout float d)
                {
                    rect(UV,vec4(3,5,1,4),shift,phi,scale,distort,d);rect(UV,vec4(3,5,2,3),shift,phi,scale,distort,d);rect(UV,vec4(3,5,8,2),shift,phi,scale,distort,d);rect(UV,vec4(10,5,1,7),shift,phi,scale,distort,d);rect(UV,vec4(2,6,1,8),shift,phi,scale,distort,d);rect(UV,vec4(0,7,3,5),shift,phi,scale,distort,d);rect(UV,vec4(1,7,2,6),shift,phi,scale,distort,d);rect(UV,vec4(10,7,2,5),shift,phi,scale,distort,d);rect(UV,vec4(8,10,2,3),shift,phi,scale,distort,d);rect(UV,vec4(7,11,1,3),shift,phi,scale,distort,d);rect(UV,vec4(5,12,3,2),shift,phi,scale,distort,d);rect(UV,vec4(2,13,6,1),shift,phi,scale,distort,d);
                }
void glyph_v(in vec2 UV, in vec2 shift, in float phi, in float scale, in float alpha, in float distort, inout float d)
                {
                    rect(UV,vec4(10,5,1,5),shift,phi,scale,distort,d);rect(UV,vec4(1,6,2,2),shift,phi,scale,distort,d);rect(UV,vec4(2,6,1,4),shift,phi,scale,distort,d);rect(UV,vec4(9,6,1,6),shift,phi,scale,distort,d);rect(UV,vec4(1,7,3,1),shift,phi,scale,distort,d);rect(UV,vec4(2,7,2,3),shift,phi,scale,distort,d);rect(UV,vec4(3,7,1,5),shift,phi,scale,distort,d);rect(UV,vec4(8,8,2,4),shift,phi,scale,distort,d);rect(UV,vec4(2,9,3,1),shift,phi,scale,distort,d);rect(UV,vec4(3,9,2,3),shift,phi,scale,distort,d);rect(UV,vec4(4,9,1,4),shift,phi,scale,distort,d);rect(UV,vec4(7,9,1,5),shift,phi,scale,distort,d);rect(UV,vec4(3,11,7,1),shift,phi,scale,distort,d);rect(UV,vec4(4,11,4,2),shift,phi,scale,distort,d);rect(UV,vec4(5,11,2,5),shift,phi,scale,distort,d);
                }
void glyph_q(in vec2 UV, in vec2 shift, in float phi, in float scale, in float alpha, in float distort, inout float d)
                {
                    rect(UV,vec4(8,2,2,3),shift,phi,scale,distort,d);rect(UV,vec4(9,2,1,14),shift,phi,scale,distort,d);rect(UV,vec4(11,2,1,3),shift,phi,scale,distort,d);rect(UV,vec4(3,3,2,7),shift,phi,scale,distort,d);rect(UV,vec4(3,3,3,3),shift,phi,scale,distort,d);rect(UV,vec4(3,3,9,2),shift,phi,scale,distort,d);rect(UV,vec4(9,3,2,5),shift,phi,scale,distort,d);rect(UV,vec4(2,4,3,5),shift,phi,scale,distort,d);rect(UV,vec4(2,8,8,1),shift,phi,scale,distort,d);rect(UV,vec4(3,8,7,2),shift,phi,scale,distort,d);rect(UV,vec4(5,8,2,3),shift,phi,scale,distort,d);rect(UV,vec4(8,8,1,10),shift,phi,scale,distort,d);rect(UV,vec4(7,14,2,3),shift,phi,scale,distort,d);
                }
void glyph_u(in vec2 UV, in vec2 shift, in float phi, in float scale, in float alpha, in float distort, inout float d)
                {
                    rect(UV,vec4(4,4,1,5),shift,phi,scale,distort,d);rect(UV,vec4(4,4,2,2),shift,phi,scale,distort,d);rect(UV,vec4(2,5,2,7),shift,phi,scale,distort,d);rect(UV,vec4(9,6,2,8),shift,phi,scale,distort,d);rect(UV,vec4(2,10,9,2),shift,phi,scale,distort,d);rect(UV,vec4(8,10,3,4),shift,phi,scale,distort,d);
                }
void glyph_e(in vec2 UV, in vec2 shift, in float phi, in float scale, in float alpha, in float distort, inout float d)
                {
                    rect(UV,vec4(6,4,1,2),shift,phi,scale,distort,d);rect(UV,vec4(6,4,3,1),shift,phi,scale,distort,d);rect(UV,vec4(8,4,1,4),shift,phi,scale,distort,d);rect(UV,vec4(4,5,1,5),shift,phi,scale,distort,d);rect(UV,vec4(4,5,3,1),shift,phi,scale,distort,d);rect(UV,vec4(8,5,2,3),shift,phi,scale,distort,d);rect(UV,vec4(3,7,1,6),shift,phi,scale,distort,d);rect(UV,vec4(6,7,2,2),shift,phi,scale,distort,d);rect(UV,vec4(3,8,3,2),shift,phi,scale,distort,d);rect(UV,vec4(2,9,2,3),shift,phi,scale,distort,d);rect(UV,vec4(10,10,1,2),shift,phi,scale,distort,d);rect(UV,vec4(8,11,2,2),shift,phi,scale,distort,d);rect(UV,vec4(3,12,2,1),shift,phi,scale,distort,d);rect(UV,vec4(4,12,1,2),shift,phi,scale,distort,d);rect(UV,vec4(6,12,1,2),shift,phi,scale,distort,d);rect(UV,vec4(6,12,4,1),shift,phi,scale,distort,d);rect(UV,vec4(4,13,3,1),shift,phi,scale,distort,d);
                }

    void phrase_Novoque(in vec2 UV, in vec2 shift, in float phi, in float scale, in float alpha, in float blur, in float distort, inout vec4 col)
        {
            float d = 1.;
            glyph_N(UV,shift+vec2(-42,-9),phi,scale,alpha,distort,d);
        glyph_o(UV,shift+vec2(-30,-9),phi,scale,alpha,distort,d);
        glyph_v(UV,shift+vec2(-18,-9),phi,scale,alpha,distort,d);
        glyph_o(UV,shift+vec2(-6,-9),phi,scale,alpha,distort,d);
        glyph_q(UV,shift+vec2(6,-9),phi,scale,alpha,distort,d);
        glyph_u(UV,shift+vec2(18,-9),phi,scale,alpha,distort,d);
        glyph_e(UV,shift+vec2(30,-9),phi,scale,alpha,distort,d);
            col = mix(col, c.yyyx, sm(d, blur));
        }
//        void mainImage( out vec4 fragColor, in vec2 fragCoord ) // qm hack
    void mainImage( out vec4 fragColor, in vec2 fragCoord )
    {

        vec2 uv = (fragCoord.xy-.5*iResolution.xy)/iResolution.y; // qm hack
        vec2 UV = uv;
        vec4 col = c.xxxx;
        phrase_Novoque(UV,vec2(2.*sin(30.*iTime),0.),0.,1.,1.,1./(1.+10.*sin(1.*iTime)),2.*sin(1.*iTime),col);
        //         phrase_Novoque(UV,vec2(.7,1.2),0.,1.,.4*round(fract(3.*iTime)),1.,1.,col);

        fragColor = vec4(clamp(col,0.,1.)); // qm hack fragColor -> gl_FragColor
    }
